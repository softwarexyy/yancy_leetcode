class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> res;
        for (int i=0; i<nums.size(); i++){
            if (i!=0 && nums[i]==nums[i-1])       // i指向的数与上一次一样，答案肯定重复，跳过
                continue;
            int p = i+1;
            int q = nums.size()-1;
            while (p<q){
                int tempSum = nums[i]+nums[p]+nums[q];
                if (tempSum < 0){
                    p++;
                }
                if (tempSum > 0){
                    q--;
                }
                if (tempSum == 0) {      //  其中一个正解
                    vector<int> temp;
                    temp.push_back(nums[i]);
                    temp.push_back(nums[p]);
                    temp.push_back(nums[q]);
                    res.push_back(temp);
                    while (nums[p+1]==nums[p])
                        p++;
                    p++;
                }
            }
        }
        return res;
    }
};
/******************************************   解题思路如下：  **************************************************************
首先是求解：因为要求3个数，如果我们固定其中1个数，再用求“和为某值的2个数的组合”的解法，就能把剩下的2个数求出来。因
此，先对数组进行非递减排序，这样整个数组的数就由小到大排列。i 的取值由 0 至 n-1，对每一个i，我们求当num[i]是解当中的其
中一个数时，其他的2个数。设有指针p指向数组头(实际只要p从i+1开始)，q指向数组尾，sum = num[i] + num[p]+ num[q]，因为num[i]
是一定在解中的，所以如果sum < 0，因为num[q]已经不能增大，所以说明num[p]太小了，这时p需要向后移动，找一个更大的数。
同理，sum > 0，说明num[q]太大了，需要q向前移动。当sum == 0时，说明找到了一个解。但找到了一个解，并不说明解中有num[i]的
所有解都找到了，因此p或q还需要继续移动寻找其他的解，直到p == q为止。
 
上面是求解的过程，那么去重怎么做？去重就在于和之前的解进行比较，但我们不需要比较所有的解，这里有一个技巧。
1. 如果num[i] = num[i - 1]，说明刚才i-1时求的解在这次肯定也会求出一样的，所以直接跳过不求；
2. 其实指针p不需要从数组头开始，因为如果num[i]所在的解中如果有i之前的数，设其位置为j，那么我们求num[j]时，肯定把num[i]
    也找出来放到和num[j]一起的解里了，所以指针p其实应该从i+1开始，即初始时p = i + 1, q = num.size() - 1；
3. 当sum == 0，我们保存了当前解以后，需要num[i]在解中的其他的2个数组合，这个时候，肯定是p往后或者q往前，如果++p，发
    现其实num[p] == num[p-1]，说明这个解肯定和刚才重复了，再继续++p。同理，如果--q后发现num[q] == num[q+1]，继续--q。
    这个去重操作主要针对这种有多个同值的数组，如：-3, 1,1,1, 2,2,3,4。
****************************************************************************************************************************/
